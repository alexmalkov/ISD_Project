//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Lahjapaja_CIM.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(address))]
    [KnownType(typeof(contact_person))]
    [KnownType(typeof(contract))]
    [KnownType(typeof(customer_site))]
    [KnownType(typeof(customer_group))]
    [KnownType(typeof(status))]
    public partial class customer: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int customerId
        {
            get { return _customerId; }
            set
            {
                if (_customerId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'customerId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _customerId = value;
                    OnPropertyChanged("customerId");
                }
            }
        }
        private int _customerId;
    
        [DataMember]
        public int groupId
        {
            get { return _groupId; }
            set
            {
                if (_groupId != value)
                {
                    ChangeTracker.RecordOriginalValue("groupId", _groupId);
                    if (!IsDeserializing)
                    {
                        if (customer_group != null && customer_group.groupId != value)
                        {
                            customer_group = null;
                        }
                    }
                    _groupId = value;
                    OnPropertyChanged("groupId");
                }
            }
        }
        private int _groupId;
    
        [DataMember]
        public int visitingAddressId
        {
            get { return _visitingAddressId; }
            set
            {
                if (_visitingAddressId != value)
                {
                    ChangeTracker.RecordOriginalValue("visitingAddressId", _visitingAddressId);
                    if (!IsDeserializing)
                    {
                        if (address1 != null && address1.addressId != value)
                        {
                            address1 = null;
                        }
                    }
                    _visitingAddressId = value;
                    OnPropertyChanged("visitingAddressId");
                }
            }
        }
        private int _visitingAddressId;
    
        [DataMember]
        public int postalAddressId
        {
            get { return _postalAddressId; }
            set
            {
                if (_postalAddressId != value)
                {
                    ChangeTracker.RecordOriginalValue("postalAddressId", _postalAddressId);
                    if (!IsDeserializing)
                    {
                        if (address != null && address.addressId != value)
                        {
                            address = null;
                        }
                    }
                    _postalAddressId = value;
                    OnPropertyChanged("postalAddressId");
                }
            }
        }
        private int _postalAddressId;
    
        [DataMember]
        public int contactPersonId
        {
            get { return _contactPersonId; }
            set
            {
                if (_contactPersonId != value)
                {
                    ChangeTracker.RecordOriginalValue("contactPersonId", _contactPersonId);
                    if (!IsDeserializing)
                    {
                        if (contact_person != null && contact_person.personId != value)
                        {
                            contact_person = null;
                        }
                    }
                    _contactPersonId = value;
                    OnPropertyChanged("contactPersonId");
                }
            }
        }
        private int _contactPersonId;
    
        [DataMember]
        public int contractId
        {
            get { return _contractId; }
            set
            {
                if (_contractId != value)
                {
                    ChangeTracker.RecordOriginalValue("contractId", _contractId);
                    if (!IsDeserializing)
                    {
                        if (contract != null && contract.contractId != value)
                        {
                            contract = null;
                        }
                    }
                    _contractId = value;
                    OnPropertyChanged("contractId");
                }
            }
        }
        private int _contractId;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    ChangeTracker.RecordOriginalValue("status", _status);
                    if (!IsDeserializing)
                    {
                        if (status1 != null && status1.statusText != value)
                        {
                            status1 = null;
                        }
                    }
                    _status = value;
                    OnPropertyChanged("status");
                }
            }
        }
        private string _status;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public address address
        {
            get { return _address; }
            set
            {
                if (!ReferenceEquals(_address, value))
                {
                    var previousValue = _address;
                    _address = value;
                    Fixupaddress(previousValue);
                    OnNavigationPropertyChanged("address");
                }
            }
        }
        private address _address;
    
        [DataMember]
        public address address1
        {
            get { return _address1; }
            set
            {
                if (!ReferenceEquals(_address1, value))
                {
                    var previousValue = _address1;
                    _address1 = value;
                    Fixupaddress1(previousValue);
                    OnNavigationPropertyChanged("address1");
                }
            }
        }
        private address _address1;
    
        [DataMember]
        public contact_person contact_person
        {
            get { return _contact_person; }
            set
            {
                if (!ReferenceEquals(_contact_person, value))
                {
                    var previousValue = _contact_person;
                    _contact_person = value;
                    Fixupcontact_person(previousValue);
                    OnNavigationPropertyChanged("contact_person");
                }
            }
        }
        private contact_person _contact_person;
    
        [DataMember]
        public contract contract
        {
            get { return _contract; }
            set
            {
                if (!ReferenceEquals(_contract, value))
                {
                    var previousValue = _contract;
                    _contract = value;
                    Fixupcontract(previousValue);
                    OnNavigationPropertyChanged("contract");
                }
            }
        }
        private contract _contract;
    
        [DataMember]
        public TrackableCollection<customer_site> customer_site
        {
            get
            {
                if (_customer_site == null)
                {
                    _customer_site = new TrackableCollection<customer_site>();
                    _customer_site.CollectionChanged += Fixupcustomer_site;
                }
                return _customer_site;
            }
            set
            {
                if (!ReferenceEquals(_customer_site, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customer_site != null)
                    {
                        _customer_site.CollectionChanged -= Fixupcustomer_site;
                    }
                    _customer_site = value;
                    if (_customer_site != null)
                    {
                        _customer_site.CollectionChanged += Fixupcustomer_site;
                    }
                    OnNavigationPropertyChanged("customer_site");
                }
            }
        }
        private TrackableCollection<customer_site> _customer_site;
    
        [DataMember]
        public customer_group customer_group
        {
            get { return _customer_group; }
            set
            {
                if (!ReferenceEquals(_customer_group, value))
                {
                    var previousValue = _customer_group;
                    _customer_group = value;
                    Fixupcustomer_group(previousValue);
                    OnNavigationPropertyChanged("customer_group");
                }
            }
        }
        private customer_group _customer_group;
    
        [DataMember]
        public status status1
        {
            get { return _status1; }
            set
            {
                if (!ReferenceEquals(_status1, value))
                {
                    var previousValue = _status1;
                    _status1 = value;
                    Fixupstatus1(previousValue);
                    OnNavigationPropertyChanged("status1");
                }
            }
        }
        private status _status1;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            address = null;
            address1 = null;
            contact_person = null;
            contract = null;
            customer_site.Clear();
            customer_group = null;
            status1 = null;
        }

        #endregion
        #region Association Fixup
    
        private void Fixupaddress(address previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.customers.Contains(this))
            {
                previousValue.customers.Remove(this);
            }
    
            if (address != null)
            {
                if (!address.customers.Contains(this))
                {
                    address.customers.Add(this);
                }
    
                postalAddressId = address.addressId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("address")
                    && (ChangeTracker.OriginalValues["address"] == address))
                {
                    ChangeTracker.OriginalValues.Remove("address");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("address", previousValue);
                }
                if (address != null && !address.ChangeTracker.ChangeTrackingEnabled)
                {
                    address.StartTracking();
                }
            }
        }
    
        private void Fixupaddress1(address previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.customers1.Contains(this))
            {
                previousValue.customers1.Remove(this);
            }
    
            if (address1 != null)
            {
                if (!address1.customers1.Contains(this))
                {
                    address1.customers1.Add(this);
                }
    
                visitingAddressId = address1.addressId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("address1")
                    && (ChangeTracker.OriginalValues["address1"] == address1))
                {
                    ChangeTracker.OriginalValues.Remove("address1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("address1", previousValue);
                }
                if (address1 != null && !address1.ChangeTracker.ChangeTrackingEnabled)
                {
                    address1.StartTracking();
                }
            }
        }
    
        private void Fixupcontact_person(contact_person previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.customers.Contains(this))
            {
                previousValue.customers.Remove(this);
            }
    
            if (contact_person != null)
            {
                if (!contact_person.customers.Contains(this))
                {
                    contact_person.customers.Add(this);
                }
    
                contactPersonId = contact_person.personId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("contact_person")
                    && (ChangeTracker.OriginalValues["contact_person"] == contact_person))
                {
                    ChangeTracker.OriginalValues.Remove("contact_person");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("contact_person", previousValue);
                }
                if (contact_person != null && !contact_person.ChangeTracker.ChangeTrackingEnabled)
                {
                    contact_person.StartTracking();
                }
            }
        }
    
        private void Fixupcontract(contract previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.customers.Contains(this))
            {
                previousValue.customers.Remove(this);
            }
    
            if (contract != null)
            {
                if (!contract.customers.Contains(this))
                {
                    contract.customers.Add(this);
                }
    
                contractId = contract.contractId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("contract")
                    && (ChangeTracker.OriginalValues["contract"] == contract))
                {
                    ChangeTracker.OriginalValues.Remove("contract");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("contract", previousValue);
                }
                if (contract != null && !contract.ChangeTracker.ChangeTrackingEnabled)
                {
                    contract.StartTracking();
                }
            }
        }
    
        private void Fixupcustomer_group(customer_group previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.customer.Contains(this))
            {
                previousValue.customer.Remove(this);
            }
    
            if (customer_group != null)
            {
                if (!customer_group.customer.Contains(this))
                {
                    customer_group.customer.Add(this);
                }
    
                groupId = customer_group.groupId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("customer_group")
                    && (ChangeTracker.OriginalValues["customer_group"] == customer_group))
                {
                    ChangeTracker.OriginalValues.Remove("customer_group");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("customer_group", previousValue);
                }
                if (customer_group != null && !customer_group.ChangeTracker.ChangeTrackingEnabled)
                {
                    customer_group.StartTracking();
                }
            }
        }
    
        private void Fixupstatus1(status previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.customers.Contains(this))
            {
                previousValue.customers.Remove(this);
            }
    
            if (status1 != null)
            {
                if (!status1.customers.Contains(this))
                {
                    status1.customers.Add(this);
                }
    
                status = status1.statusText;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("status1")
                    && (ChangeTracker.OriginalValues["status1"] == status1))
                {
                    ChangeTracker.OriginalValues.Remove("status1");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("status1", previousValue);
                }
                if (status1 != null && !status1.ChangeTracker.ChangeTrackingEnabled)
                {
                    status1.StartTracking();
                }
            }
        }
    
        private void Fixupcustomer_site(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (customer_site item in e.NewItems)
                {
                    item.customer = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("customer_site", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (customer_site item in e.OldItems)
                {
                    if (ReferenceEquals(item.customer, this))
                    {
                        item.customer = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("customer_site", item);
                    }
                }
            }
        }

        #endregion
    }
}
