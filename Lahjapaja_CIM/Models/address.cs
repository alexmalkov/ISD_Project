//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Lahjapaja_CIM.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(contact_person))]
    [KnownType(typeof(customer_site))]
    [KnownType(typeof(customer))]
    public partial class address: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int addressId
        {
            get { return _addressId; }
            set
            {
                if (_addressId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'addressId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _addressId = value;
                    OnPropertyChanged("addressId");
                }
            }
        }
        private int _addressId;
    
        [DataMember]
        public string town
        {
            get { return _town; }
            set
            {
                if (_town != value)
                {
                    _town = value;
                    OnPropertyChanged("town");
                }
            }
        }
        private string _town;
    
        [DataMember]
        public string street
        {
            get { return _street; }
            set
            {
                if (_street != value)
                {
                    _street = value;
                    OnPropertyChanged("street");
                }
            }
        }
        private string _street;
    
        [DataMember]
        public int houseNo
        {
            get { return _houseNo; }
            set
            {
                if (_houseNo != value)
                {
                    _houseNo = value;
                    OnPropertyChanged("houseNo");
                }
            }
        }
        private int _houseNo;
    
        [DataMember]
        public string postCode
        {
            get { return _postCode; }
            set
            {
                if (_postCode != value)
                {
                    _postCode = value;
                    OnPropertyChanged("postCode");
                }
            }
        }
        private string _postCode;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public TrackableCollection<contact_person> contact_person
        {
            get
            {
                if (_contact_person == null)
                {
                    _contact_person = new TrackableCollection<contact_person>();
                    _contact_person.CollectionChanged += Fixupcontact_person;
                }
                return _contact_person;
            }
            set
            {
                if (!ReferenceEquals(_contact_person, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_contact_person != null)
                    {
                        _contact_person.CollectionChanged -= Fixupcontact_person;
                    }
                    _contact_person = value;
                    if (_contact_person != null)
                    {
                        _contact_person.CollectionChanged += Fixupcontact_person;
                    }
                    OnNavigationPropertyChanged("contact_person");
                }
            }
        }
        private TrackableCollection<contact_person> _contact_person;
    
        [DataMember]
        public TrackableCollection<customer_site> customer_site
        {
            get
            {
                if (_customer_site == null)
                {
                    _customer_site = new TrackableCollection<customer_site>();
                    _customer_site.CollectionChanged += Fixupcustomer_site;
                }
                return _customer_site;
            }
            set
            {
                if (!ReferenceEquals(_customer_site, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customer_site != null)
                    {
                        _customer_site.CollectionChanged -= Fixupcustomer_site;
                    }
                    _customer_site = value;
                    if (_customer_site != null)
                    {
                        _customer_site.CollectionChanged += Fixupcustomer_site;
                    }
                    OnNavigationPropertyChanged("customer_site");
                }
            }
        }
        private TrackableCollection<customer_site> _customer_site;
    
        [DataMember]
        public TrackableCollection<customer_site> customer_site1
        {
            get
            {
                if (_customer_site1 == null)
                {
                    _customer_site1 = new TrackableCollection<customer_site>();
                    _customer_site1.CollectionChanged += Fixupcustomer_site1;
                }
                return _customer_site1;
            }
            set
            {
                if (!ReferenceEquals(_customer_site1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customer_site1 != null)
                    {
                        _customer_site1.CollectionChanged -= Fixupcustomer_site1;
                    }
                    _customer_site1 = value;
                    if (_customer_site1 != null)
                    {
                        _customer_site1.CollectionChanged += Fixupcustomer_site1;
                    }
                    OnNavigationPropertyChanged("customer_site1");
                }
            }
        }
        private TrackableCollection<customer_site> _customer_site1;
    
        [DataMember]
        public TrackableCollection<customer> customers
        {
            get
            {
                if (_customers == null)
                {
                    _customers = new TrackableCollection<customer>();
                    _customers.CollectionChanged += Fixupcustomers;
                }
                return _customers;
            }
            set
            {
                if (!ReferenceEquals(_customers, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customers != null)
                    {
                        _customers.CollectionChanged -= Fixupcustomers;
                    }
                    _customers = value;
                    if (_customers != null)
                    {
                        _customers.CollectionChanged += Fixupcustomers;
                    }
                    OnNavigationPropertyChanged("customers");
                }
            }
        }
        private TrackableCollection<customer> _customers;
    
        [DataMember]
        public TrackableCollection<customer> customers1
        {
            get
            {
                if (_customers1 == null)
                {
                    _customers1 = new TrackableCollection<customer>();
                    _customers1.CollectionChanged += Fixupcustomers1;
                }
                return _customers1;
            }
            set
            {
                if (!ReferenceEquals(_customers1, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Cannot set the FixupChangeTrackingCollection when ChangeTracking is enabled");
                    }
                    if (_customers1 != null)
                    {
                        _customers1.CollectionChanged -= Fixupcustomers1;
                    }
                    _customers1 = value;
                    if (_customers1 != null)
                    {
                        _customers1.CollectionChanged += Fixupcustomers1;
                    }
                    OnNavigationPropertyChanged("customers1");
                }
            }
        }
        private TrackableCollection<customer> _customers1;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            contact_person.Clear();
            customer_site.Clear();
            customer_site1.Clear();
            customers.Clear();
            customers1.Clear();
        }

        #endregion
        #region Association Fixup
    
        private void Fixupcontact_person(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (contact_person item in e.NewItems)
                {
                    item.address = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("contact_person", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (contact_person item in e.OldItems)
                {
                    if (ReferenceEquals(item.address, this))
                    {
                        item.address = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("contact_person", item);
                    }
                }
            }
        }
    
        private void Fixupcustomer_site(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (customer_site item in e.NewItems)
                {
                    item.address = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("customer_site", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (customer_site item in e.OldItems)
                {
                    if (ReferenceEquals(item.address, this))
                    {
                        item.address = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("customer_site", item);
                    }
                }
            }
        }
    
        private void Fixupcustomer_site1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (customer_site item in e.NewItems)
                {
                    item.address1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("customer_site1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (customer_site item in e.OldItems)
                {
                    if (ReferenceEquals(item.address1, this))
                    {
                        item.address1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("customer_site1", item);
                    }
                }
            }
        }
    
        private void Fixupcustomers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (customer item in e.NewItems)
                {
                    item.address = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("customers", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.address, this))
                    {
                        item.address = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("customers", item);
                    }
                }
            }
        }
    
        private void Fixupcustomers1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (customer item in e.NewItems)
                {
                    item.address1 = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("customers1", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (customer item in e.OldItems)
                {
                    if (ReferenceEquals(item.address1, this))
                    {
                        item.address1 = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("customers1", item);
                    }
                }
            }
        }

        #endregion
    }
}
