//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace MKSK_Lahjapaja_CIM.Models
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(address))]
    [KnownType(typeof(contact_person))]
    [KnownType(typeof(contract))]
    [KnownType(typeof(customer))]
    public partial class customer_site: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Primitive Properties
    
        [DataMember]
        public int customerSiteId
        {
            get { return _customerSiteId; }
            set
            {
                if (_customerSiteId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("The property 'customerSiteId' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
                    }
                    _customerSiteId = value;
                    OnPropertyChanged("customerSiteId");
                }
            }
        }
        private int _customerSiteId;
    
        [DataMember]
        public int customerId
        {
            get { return _customerId; }
            set
            {
                if (_customerId != value)
                {
                    ChangeTracker.RecordOriginalValue("customerId", _customerId);
                    if (!IsDeserializing)
                    {
                        if (customer != null && customer.customerId != value)
                        {
                            customer = null;
                        }
                    }
                    _customerId = value;
                    OnPropertyChanged("customerId");
                }
            }
        }
        private int _customerId;
    
        [DataMember]
        public int contactPersonId
        {
            get { return _contactPersonId; }
            set
            {
                if (_contactPersonId != value)
                {
                    ChangeTracker.RecordOriginalValue("contactPersonId", _contactPersonId);
                    if (!IsDeserializing)
                    {
                        if (contact_person != null && contact_person.personId != value)
                        {
                            contact_person = null;
                        }
                    }
                    _contactPersonId = value;
                    OnPropertyChanged("contactPersonId");
                }
            }
        }
        private int _contactPersonId;
    
        [DataMember]
        public int addressId
        {
            get { return _addressId; }
            set
            {
                if (_addressId != value)
                {
                    ChangeTracker.RecordOriginalValue("addressId", _addressId);
                    if (!IsDeserializing)
                    {
                        if (address != null && address.addressId != value)
                        {
                            address = null;
                        }
                    }
                    _addressId = value;
                    OnPropertyChanged("addressId");
                }
            }
        }
        private int _addressId;
    
        [DataMember]
        public Nullable<int> contractId
        {
            get { return _contractId; }
            set
            {
                if (_contractId != value)
                {
                    ChangeTracker.RecordOriginalValue("contractId", _contractId);
                    if (!IsDeserializing)
                    {
                        if (contract != null && contract.contractId != value)
                        {
                            contract = null;
                        }
                    }
                    _contractId = value;
                    OnPropertyChanged("contractId");
                }
            }
        }
        private Nullable<int> _contractId;
    
        [DataMember]
        public string name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string status
        {
            get { return _status; }
            set
            {
                if (_status != value)
                {
                    _status = value;
                    OnPropertyChanged("status");
                }
            }
        }
        private string _status;

        #endregion
        #region Navigation Properties
    
        [DataMember]
        public address address
        {
            get { return _address; }
            set
            {
                if (!ReferenceEquals(_address, value))
                {
                    var previousValue = _address;
                    _address = value;
                    Fixupaddress(previousValue);
                    OnNavigationPropertyChanged("address");
                }
            }
        }
        private address _address;
    
        [DataMember]
        public contact_person contact_person
        {
            get { return _contact_person; }
            set
            {
                if (!ReferenceEquals(_contact_person, value))
                {
                    var previousValue = _contact_person;
                    _contact_person = value;
                    Fixupcontact_person(previousValue);
                    OnNavigationPropertyChanged("contact_person");
                }
            }
        }
        private contact_person _contact_person;
    
        [DataMember]
        public contract contract
        {
            get { return _contract; }
            set
            {
                if (!ReferenceEquals(_contract, value))
                {
                    var previousValue = _contract;
                    _contract = value;
                    Fixupcontract(previousValue);
                    OnNavigationPropertyChanged("contract");
                }
            }
        }
        private contract _contract;
    
        [DataMember]
        public customer customer
        {
            get { return _customer; }
            set
            {
                if (!ReferenceEquals(_customer, value))
                {
                    var previousValue = _customer;
                    _customer = value;
                    Fixupcustomer(previousValue);
                    OnNavigationPropertyChanged("customer");
                }
            }
        }
        private customer _customer;

        #endregion
        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            address = null;
            contact_person = null;
            contract = null;
            customer = null;
        }

        #endregion
        #region Association Fixup
    
        private void Fixupaddress(address previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.customer_site.Contains(this))
            {
                previousValue.customer_site.Remove(this);
            }
    
            if (address != null)
            {
                if (!address.customer_site.Contains(this))
                {
                    address.customer_site.Add(this);
                }
    
                addressId = address.addressId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("address")
                    && (ChangeTracker.OriginalValues["address"] == address))
                {
                    ChangeTracker.OriginalValues.Remove("address");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("address", previousValue);
                }
                if (address != null && !address.ChangeTracker.ChangeTrackingEnabled)
                {
                    address.StartTracking();
                }
            }
        }
    
        private void Fixupcontact_person(contact_person previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.customer_site.Contains(this))
            {
                previousValue.customer_site.Remove(this);
            }
    
            if (contact_person != null)
            {
                if (!contact_person.customer_site.Contains(this))
                {
                    contact_person.customer_site.Add(this);
                }
    
                contactPersonId = contact_person.personId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("contact_person")
                    && (ChangeTracker.OriginalValues["contact_person"] == contact_person))
                {
                    ChangeTracker.OriginalValues.Remove("contact_person");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("contact_person", previousValue);
                }
                if (contact_person != null && !contact_person.ChangeTracker.ChangeTrackingEnabled)
                {
                    contact_person.StartTracking();
                }
            }
        }
    
        private void Fixupcontract(contract previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.customer_site.Contains(this))
            {
                previousValue.customer_site.Remove(this);
            }
    
            if (contract != null)
            {
                if (!contract.customer_site.Contains(this))
                {
                    contract.customer_site.Add(this);
                }
    
                contractId = contract.contractId;
            }
            else if (!skipKeys)
            {
                contractId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("contract")
                    && (ChangeTracker.OriginalValues["contract"] == contract))
                {
                    ChangeTracker.OriginalValues.Remove("contract");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("contract", previousValue);
                }
                if (contract != null && !contract.ChangeTracker.ChangeTrackingEnabled)
                {
                    contract.StartTracking();
                }
            }
        }
    
        private void Fixupcustomer(customer previousValue)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.customer_site.Contains(this))
            {
                previousValue.customer_site.Remove(this);
            }
    
            if (customer != null)
            {
                if (!customer.customer_site.Contains(this))
                {
                    customer.customer_site.Add(this);
                }
    
                customerId = customer.customerId;
            }
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("customer")
                    && (ChangeTracker.OriginalValues["customer"] == customer))
                {
                    ChangeTracker.OriginalValues.Remove("customer");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("customer", previousValue);
                }
                if (customer != null && !customer.ChangeTracker.ChangeTrackingEnabled)
                {
                    customer.StartTracking();
                }
            }
        }

        #endregion
    }
}
